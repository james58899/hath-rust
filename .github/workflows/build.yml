name: Build

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:
    inputs:
      skip-linux:
        required: false
        type: boolean
        default: false
      skip-linux-musl:
        required: false
        type: boolean
        default: false
      skip-windows:
        required: false
        type: boolean
        default: false
      skip-macos:
        required: false
        type: boolean
        default: false
      skip-android:
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-22.04-arm
    if: inputs.skip-linux != true
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-unknown-linux-gnu", "aarch64-unknown-linux-gnu", "armv7-unknown-linux-gnueabihf"]
    steps:
    - uses: actions/checkout@v4
    - name: Install amd64 build tools
      if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
      run: |
        sudo apt-get update && sudo apt-get install -y crossbuild-essential-amd64
    - name: Install arm build tools
      if: ${{ matrix.target == 'armv7-unknown-linux-gnueabihf' }}
      run: |
        sudo apt-get update && sudo apt-get install -y crossbuild-essential-armhf
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
    - name: Install toolchain
      run: |
        rustup update
        rustup target add ${{ matrix.target }}
    - name: Build
      env:
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: "x86_64-linux-gnu-gcc"
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"
        CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: "arm-linux-gnueabihf-gcc"
      run: cargo build --verbose --release --target=${{ matrix.target }}
    - uses: actions/upload-artifact@v4
      with:
        name: hath-rust-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/hath-rust
  build-linux-musl:
    runs-on: ubuntu-22.04-arm
    if: inputs.skip-linux-musl != true
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-unknown-linux-musl", "aarch64-unknown-linux-musl", "armv7-unknown-linux-musleabihf"]
    steps:
    - uses: actions/checkout@v4
    - name: Install LLVM
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 19
    - name: Install amd64 headers
      if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
      run: sudo apt-get install -y libgcc-11-dev-amd64-cross
    - name: Install arm headers
      if: ${{ matrix.target == 'armv7-unknown-linux-musleabihf' }}
      run: sudo apt-get install -y libgcc-11-dev-armhf-cross
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
    - name: Install toolchain
      run: |
        rustup update
        rustup target add ${{ matrix.target }}
    - name: Build
      env:
        CC: clang-19
        CXX: clang-19
        CFLAGS: "-fuse-ld=lld-19"
        CXXFLAGS: "-fuse-ld=lld-19"
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_RUSTFLAGS: "-Clinker=clang-19 -Clink-arg=-fuse-ld=lld-19 -Clink-arg=--target=x86_64-unknown-linux-musl"
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS: "-Clinker=clang-19 -Clink-arg=-fuse-ld=lld-19 -Clink-arg=--target=aarch64-unknown-linux-musl"
        CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_RUSTFLAGS: "-Clinker=clang-19 -Clink-arg=-fuse-ld=lld-19 -Clink-arg=--target=armv7-unknown-linux-musleabihf"
      run: cargo build --verbose --release --target=${{ matrix.target }}
    - uses: actions/upload-artifact@v4
      with:
        name: hath-rust-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/hath-rust
  build-windows:
    runs-on: windows-latest
    if: inputs.skip-windows != true
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-pc-windows-msvc", "i686-pc-windows-msvc"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install toolchain
        run: |
          rustup update
          rustup target add ${{ matrix.target }}
      - name: Build
        env:
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER: "rust-lld"
          CARGO_TARGET_I686_PC_WINDOWS_MSVC_LINKER: "rust-lld"
        run: cargo build --verbose --release --target ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: hath-rust-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/hath-rust.exe
  build-macos:
    runs-on: macos-14
    if: inputs.skip-macos != true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install toolchain
        run: |
          rustup update
          rustup target add x86_64-apple-darwin
      - name: Build x86
        run: cargo build --verbose --release --target x86_64-apple-darwin
      - name: Build ARM64
        run: cargo build --verbose --release --target aarch64-apple-darwin
      - name: Universal binary
        run: lipo -create target/x86_64-apple-darwin/release/hath-rust target/aarch64-apple-darwin/release/hath-rust -output target/release/hath-rust
      - uses: actions/upload-artifact@v4
        with:
          name: hath-rust-universal-apple-darwin
          path: target/release/hath-rust
  build-android:
    runs-on: ubuntu-latest
    if: inputs.skip-android != true
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi
          - i686-linux-android
          - x86_64-linux-android
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
    - name: Install toolchain
      run: |
        rustup update
        rustup target add ${{ matrix.target }}
    - name: Build
      env:
        CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: "aarch64-linux-android21-clang"
        CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER: "armv7a-linux-androideabi21-clang"
        CARGO_TARGET_I686_LINUX_ANDROID_LINKER: "i686-linux-android21-clang"
        CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: "x86_64-linux-android21-clang"
        CC_armv7-linux-androideabi: "armv7a-linux-androideabi21-clang"
        CC_i686-linux-android: "i686-linux-android21-clang"
      run: |
        find "${ANDROID_NDK_ROOT}" -name "libunwind.a" -execdir touch libgcc.a \;
        export PATH=$PATH:${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin
        cargo build --verbose --release --target=${{ matrix.target }}
    - uses: actions/upload-artifact@v4
      with:
        name: hath-rust-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/hath-rust
